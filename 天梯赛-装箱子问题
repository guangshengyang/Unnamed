/*
假设有N项物品，大小分别为s
​1
​​ 、s
​2
​​ 、…、s
​i
​​ 、…、s
​N
​​ ，其中s
​i
​​ 为满足1≤s
​i
​​ ≤100的整数。要把这些物品装入到容量为100的一批箱子（序号1-N）中。装箱方法是：对每项物品, 顺序扫描箱子，把该物品放入足以能够容下它的第一个箱子中。请写一个程序模拟这种装箱过程，并输出每个物品所在的箱子序号，以及放置全部物品所需的箱子数目。

输入格式：
输入第一行给出物品个数N（≤1000）；第二行给出N个正整数s
​i
​​ （1≤s
​i
​​ ≤100，表示第i项物品的大小）。

输出格式：
按照输入顺序输出每个物品的大小及其所在的箱子序号，每个物品占1行，最后一行输出所需的箱子数目。

输入样例：
8
60 70 80 90 30 40 10 20

      
    
输出样例：
60 1
70 2
80 3
90 4
30 1
40 5
10 1
20 2
5
*/

#include <stdio.h>
int main()
{
    int n, i, j, max = 0;
    static int a[10000], index[10000], b[10000];
    scanf("%d", &n);

    for (i = 0; i < n; i++)
    {
        scanf("%d", &a[i]);
        b[i] = a[i];
    }

    for (i = 0; i < n; i++)
    {
        for (j = 0; j < i; j++)
        {
            if (a[i] + a[j] <= 100)
            {
                a[j] = a[j] + a[i];
                a[i] = 0;
                index[i] = j; //index[物品的偏号]=箱子的偏号//箱子的个数;
                break;        // 一旦找到符合的，立刻跳出内层循环；否则会连续赋值；
            }
            else
                index[i] = i;
        }
    }
    max = 0;
    for (i = 0; i < n; i++)
    {
        if (index[max] < index[i])
            max = i;
    }

    for (i = 0; i < n; i++)
    {
        printf("%d %d\n", b[i], index[i] + 1); //加一的目的是箱子的编号是从1开始的；
    }
    printf("%d", index[max] + 1);
    
    return 0;
}
